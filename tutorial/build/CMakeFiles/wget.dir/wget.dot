digraph callgraph {
"void sig_handler(int)" -> "virtual void WFCounterTask::count()" [style=dotted];
"WFFacilities::WaitGroup::~WaitGroup()" -> "virtual void WFCounterTask::count()" [style=dotted];
"void WFFuture<RES>::wait() const [with RES = void]" -> "virtual bool std::__future_base::_State_baseV2::_M_is_deferred_future() const" [style=dotted];
"int main(int, char**)" -> "void sig_handler(int)" [style=dotted];
"int main(int, char**)" -> "static bool std::_Function_base::_Base_manager<_Functor>::_M_manager(std::_Any_data&, const std::_Any_data&, std::_Manager_operation) [with _Functor = void (*)(WFNetworkTask<protocol::HttpRequest, protocol::HttpResponse>*)]" [style=dotted];
"int main(int, char**)" -> "void wget_callback(WFHttpTask*)" [style=dotted];
"int main(int, char**)" -> "static void std::_Function_handler<void(_ArgTypes ...), _Functor>::_M_invoke(const std::_Any_data&, _ArgTypes&& ...) [with _Functor = void (*)(WFNetworkTask<protocol::HttpRequest, protocol::HttpResponse>*); _ArgTypes = {WFNetworkTask<protocol::HttpRequest, protocol::HttpResponse>*}]" [style=dotted];
"int main(int, char**)" -> "bool protocol::HttpMessage::add_header_pair(const char*, const char*)" [style=dotted];
"int main(int, char**)" -> "void WFFuture<RES>::wait() const [with RES = void]" [style=dotted];
"virtual SubTask* WFCounterTask::done()" -> "virtual WFCounterTask::~WFCounterTask()" [style=dotted];
"static void WFFacilities::WaitGroup::__wait_group_callback(WFCounterTask*)" -> "void std::__future_base::_State_baseV2::_M_do_set(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()>*, bool*)" [style=dotted];
"static void WFFacilities::WaitGroup::__wait_group_callback(WFCounterTask*)" -> "static bool std::_Function_base::_Base_manager<_Functor>::_M_manager(std::_Any_data&, const std::_Any_data&, std::_Manager_operation) [with _Functor = std::__future_base::_State_baseV2::_Setter<void, void>]" [style=dotted];
"static void WFFacilities::WaitGroup::__wait_group_callback(WFCounterTask*)" -> "virtual void std::__future_base::_Result<void>::_M_destroy()" [style=dotted];
"static void WFFacilities::WaitGroup::__wait_group_callback(WFCounterTask*)" -> "static void std::call_once(std::once_flag&, _Callable&&, _Args&& ...) [with _Callable = void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()>*, bool*); _Args = {std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()>*, bool*}]::<lambda()>::_FUN()" [style=dotted];
"static void WFFacilities::WaitGroup::__wait_group_callback(WFCounterTask*)" -> "static _Res std::_Function_handler<_Res(_ArgTypes ...), _Functor>::_M_invoke(const std::_Any_data&, _ArgTypes&& ...) [with _Res = std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>; _Functor = std::__future_base::_State_baseV2::_Setter<void, void>; _ArgTypes = {}]" [style=dotted];
"(static initializers for /home/zyh/workflow-master/tutorial/tutorial-01-wget.cc)" -> "static bool std::_Function_base::_Base_manager<_Functor>::_M_manager(std::_Any_data&, const std::_Any_data&, std::_Manager_operation) [with _Functor = void (*)(WFCounterTask*)]" [style=dotted];
"(static initializers for /home/zyh/workflow-master/tutorial/tutorial-01-wget.cc)" -> "static void WFFacilities::WaitGroup::__wait_group_callback(WFCounterTask*)" [style=dotted];
"(static initializers for /home/zyh/workflow-master/tutorial/tutorial-01-wget.cc)" -> "static void std::_Function_handler<void(_ArgTypes ...), _Functor>::_M_invoke(const std::_Any_data&, _ArgTypes&& ...) [with _Functor = void (*)(WFCounterTask*); _ArgTypes = {WFCounterTask*}]" [style=dotted];
"virtual int protocol::ProtocolMessage::append(const void*, size_t)";
"protocol::RedisMessage::~RedisMessage()";
"std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::~_Sp_counted_ptr_inplace() [with _Tp = std::__future_base::_State_baseV2; _Alloc = std::allocator<std::__future_base::_State_baseV2>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]";
"virtual protocol::RedisValue::~RedisValue()";
"void std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_M_dispose() [with _Tp = std::__future_base::_State_baseV2; _Alloc = std::allocator<std::__future_base::_State_baseV2>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]";
"virtual protocol::RedisMessage::~RedisMessage()";
"WFCounterTask::~WFCounterTask()";
"virtual std::__future_base::_Result<void>::~_Result()";
"virtual protocol::HttpHeaderCursor::~HttpHeaderCursor()";
"virtual void protocol::RedisMessage::_ZThn8_N8protocol12RedisMessageD0Ev()";
"protocol::HttpHeaderCursor::~HttpHeaderCursor()";
"std::call_once(std::once_flag&, _Callable&&, _Args&& ...)::<lambda()> [with _Callable = void (std::__future_base::_State_baseV2::*)(std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()>*, bool*); _Args = {std::__future_base::_State_baseV2*, std::function<std::unique_ptr<std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter>()>*, bool*}]";
"virtual void std::__future_base::_State_baseV2::_M_complete_async()";
"virtual void WFCounterTask::dispatch()";
"std::__future_base::_State_baseV2::~_State_baseV2()";
"void std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_M_destroy() [with _Tp = std::__future_base::_State_baseV2; _Alloc = std::allocator<std::__future_base::_State_baseV2>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]";
"virtual std::__future_base::_State_baseV2::~_State_baseV2()";
"std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::~_Sp_counted_ptr_inplace() [with _Tp = std::__future_base::_State_baseV2; _Alloc = std::allocator<std::__future_base::_State_baseV2>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]";
"protocol::RedisValue::~RedisValue()";
"void* std::_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>::_M_get_deleter(const std::type_info&) [with _Tp = std::__future_base::_State_baseV2; _Alloc = std::allocator<std::__future_base::_State_baseV2>; __gnu_cxx::_Lock_policy _Lp = (__gnu_cxx::_Lock_policy)2]";
"std::__future_base::_Result<void>::~_Result()";
"virtual void protocol::RedisMessage::_ZThn8_N8protocol12RedisMessageD1Ev()";
}
